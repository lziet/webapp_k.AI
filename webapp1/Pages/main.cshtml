@page
@model mainModel
@{
    Layout = "_Layout";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Main</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Huninn&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Zen+Old+Mincho&display=swap" rel="stylesheet">
    <style>
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            gap: 50px;
            padding: 100px;
        }

        .left-box,
        .right-box {
            background-color: white;
            padding: 30px;
            border: 1px solid black;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 300px;
        }

        h2, h3 {
            text-align: center;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            margin-bottom: 10px;
        }

        form {
            display: flex;
            flex-direction: column;
        }

            form label {
                margin-top: 10px;
            }

            form input {
                padding: 6px;
                margin-top: 5px;
            }

        button {
            margin-top: 15px;
            padding: 10px;
            border: 1px solid black;
            background-color: white;
            cursor: pointer;
        }

        .logout-btn {
            background-color: red;
            color: white;
            font-weight: bold;
        }

        .welcome {
            text-align: center;
            padding: 20px 0;
        }

        .center-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            gap: 40px;
        }

        .box-card {
            background-color: #fff;
            border: 2px solid #000;
            padding: 40px;
            width: 300px;
            box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2);
            text-align: center;
        }

            .box-card h2 {
                margin-bottom: 20px;
            }

            .box-card a {
                display: inline-block;
                margin: 10px;
                padding: 10px 20px;
                border: 2px solid black;
                background-color: white;
                text-decoration: none;
                color: black;
                transition: transform 0.2s, box-shadow 0.2s;
            }

                .box-card a:hover {
                    transform: translateY(-5px);
                    box-shadow: 5px 10px 20px rgba(0, 0, 0, 0.3);
                }

            .box-card form {
                display: flex;
                flex-direction: column;
                align-items: stretch;
            }

                .box-card form label {
                    text-align: left;
                    margin-top: 10px;
                    margin-bottom: 4px;
                    font-weight: bold;
                }

                .box-card form input {
                    padding: 6px;
                    font-size: 14px;
                    border: 1px solid #ccc;
                    border-radius: 4px;
                }

                .box-card form button {
                    margin-top: 15px;
                    margin-right: 10px;
                    padding: 10px;
                    font-weight: bold;
                    border: 2px solid black;
                    background-color: white;
                    cursor: pointer;
                    transition: transform 0.2s, box-shadow 0.2s;
                }

                    .box-card form button:hover {
                        transform: translateY(-3px);
                        box-shadow: 3px 6px 12px rgba(0, 0, 0, 0.2);
                    }

        .change-btn {
            margin-top: 15px;
            padding: 10px;
            font-weight: bold;
            border: 2px solid black;
            background-color: white;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .change-btn:hover {
                transform: translateY(-3px);
                box-shadow: 3px 6px 12px rgba(0, 0, 0, 0.2);
            }

        .box-card {
            width: 400px;
            transition: width 0.3s ease;
        }

            .box-card.wide {
                width: 620px;
            }

        #editForm {
            display: grid;
            grid-template-columns: 1fr 1fr;
            column-gap: 20px;
            row-gap: 15px;
        }

            #editForm label {
                display: flex;
                flex-direction: column;
                font-weight: bold;
            }

            #editForm button {
                grid-column: span 2;
            }

        .subpad {
            padding-top: 100px;
            padding-bottom: 100px;
        }
    </style>
</head>
<body class="body">
    <div class="subpad">
        <div class="welcome">
            <h2 id="greeting">Đang tải thông tin người dùng...</h2>
            <p>Đây là trang chính. Bạn có thể xem và chỉnh sửa thông tin tài khoản của mình hoặc làm bài kiểm tra đánh giá năng lực bên dưới</p>
        </div>

        <div class="container">
            <div class="box-card" id="leftBox">
                <div id="infoDisplay">
                    <h3>Thông Tin Tài Khoản</h3>
                    <ul id="userInfoList"></ul>
                    <form>
                        <button type="button" class="change-btn" onclick="toggleEdit(true)">Thay đổi thông tin</button>
                    </form>
                </div>

                <div id="infoEdit" style="display: none">
                    <h3>User Info</h3>
                    <form method="post" id="editForm">
                        <input type="hidden" name="action" value="update" />
                        <label>Full Name:<input type="text" name="FullName" /></label>
                        <label>Email:<input type="email" name="Email" /></label>
                        <label>Phone:<input type="text" name="Phone" /></label>
                        <label>Address:<input type="text" name="Address" /></label>
                        <label>Username:<input type="text" name="Username" /></label>
                        <label>Password:<input type="password" name="Password" /></label>
                        <button type="submit">Save Changes</button>
                        <button type="button" onclick="toggleEdit(false)">Cancel</button>
                    </form>
                </div>

                <form method="post">
                    <button type="submit" name="action" value="logout">Đăng Xuất</button>
                </form>
            </div>

            <div class="box-card">
                <h2>Lựa Chọn</h2>
                <a asp-page="/test">Làm Bài Kiểm Tra</a>
                <a asp-page="/results">Kết Quả</a>
            </div>
        </div>
    </div>

    <!-- Expose function for inline onclicks -->
    <script>
        function toggleEdit(showEdit) {
            document.getElementById('infoDisplay').style.display = showEdit ? 'none' : 'block';
            document.getElementById('infoEdit').style.display = showEdit ? 'block' : 'none';

            const box = document.getElementById('leftBox');
            box.classList.toggle('wide', showEdit);
        }
    </script>

    <script type="module">
        const apiBaseUrl = "@Model.ApiBaseUrl";

        async function initPage() {
            function parseJwt(token) {
                try {
                    const base64Url = token.split('.')[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>
                        '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
                    ).join(''));
                    return JSON.parse(jsonPayload);
                } catch (err) {
                    console.error("Invalid token format:", err);
                    return null;
                }
            }

            const jwt = sessionStorage.getItem("jwt");
            const storedPassword = sessionStorage.getItem("loginPassword");

            if (!jwt) {
                document.getElementById("greeting").textContent = "Không tìm thấy token.";
                return;
            }

            const payload = parseJwt(jwt);
            if (!payload || !payload.nameid) {
                document.getElementById("greeting").textContent = "Token không hợp lệ.";
                return;
            }


            const userInfo = {
                Username: payload.unique_name ?? '',
                FullName: payload.Fullname ?? '',
                Email: payload.email ?? '',
                Phone: payload.Phone ?? '',
                Address: payload.Address ?? ''
            };

            document.getElementById("greeting").textContent = `Xin chào, ${userInfo.FullName}!`;

            // Fill display info
            const infoList = document.getElementById("userInfoList");
            infoList.innerHTML = "";
            for (const key in userInfo) {
                const label = key.replace(/([A-Z])/g, ' $1').trim();
                infoList.innerHTML += `<li><strong>${label}:</strong> ${userInfo[key]}</li>`;
            }

            // Fill edit fields
            for (const key in userInfo) {
                const input = document.querySelector(`#editForm [name='${key}']`);
                if (input) input.value = userInfo[key];
            }

            // ✅ Handle update + auto-login
            document.querySelector("#editForm").addEventListener("submit", async (e) => {
                e.preventDefault();

                const newUsername = document.querySelector("[name='Username']").value || null;
                const newPassword = document.querySelector("[name='Password']").value || storedPassword;

                const updated = {
                    username: newUsername,
                    password: newPassword,
                    fullname: document.querySelector("[name='FullName']").value || null,
                    email: document.querySelector("[name='Email']").value || null,
                    phone: document.querySelector("[name='Phone']").value || null,
                    address: document.querySelector("[name='Address']").value || null
                };

                const userId = payload.nameid;
                const updateUrl = `${apiBaseUrl}/api/users/${userId}`;

                try {
                    const updateRes = await fetch(updateUrl, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + jwt
                        },
                        body: JSON.stringify(updated)
                    });

                    if (!updateRes.ok) {
                        const err = await updateRes.text();
                        console.error("Update failed:", err);
                        alert("Cập nhật thất bại.");
                        return;
                    }

                    // 🔁 Re-login
                    const loginRes = await fetch(`${apiBaseUrl}/api/users/login`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ username: newUsername, password: newPassword })
                    });

                    const loginData = await loginRes.json();

                    if (!loginRes.ok || !loginData.data?.accessToken || !loginData.data?.refreshToken) {
                        console.error("Login failed:", loginData);
                        alert("Đăng nhập lại thất bại.");
                        return;
                    }

                    // ✅ Save tokens and clean up
                    sessionStorage.setItem("jwt", loginData.data.accessToken);
                    sessionStorage.setItem("refreshToken", loginData.data.refreshToken);
                    sessionStorage.removeItem("loginPassword", newPassword); // persist updated password

                    alert("Cập nhật và đăng nhập lại thành công.");
                    location.reload();

                } catch (err) {
                    console.error("Lỗi trong quá trình cập nhật hoặc đăng nhập:", err);
                    alert("Đã xảy ra lỗi.");
                }
            });
        }

        initPage();
    </script>


    <script>
        document.querySelector("form button[name='action'][value='logout']").addEventListener("click", async function (e) {
            e.preventDefault();

            try {
                // Optional: if your API requires auth, include the token
                const jwt = sessionStorage.getItem("jwt");

                await fetch("@Model.ApiBaseUrl/api/users/logout", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": jwt ? `Bearer ${jwt}` : undefined
                    }
                });

                // Clear session tokens
                sessionStorage.removeItem("jwt");
                sessionStorage.removeItem("refreshToken");

                // Redirect to login
                window.location.href = "/login";

            } catch (error) {
                console.error("Logout failed:", error);
                alert("Đăng xuất thất bại.");
            }
        });
    </script>


</body>
</html>
