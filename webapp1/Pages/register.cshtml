@page
@model registerModel
@{
    ViewData["Title"] = "Register";
}

<div style="padding-top: 30px; padding-left: 30px;">
    <a href="/" style="
        display: inline-block;
        background-color: #ffffffcc;
        padding: 8px 12px;
        border-radius: 6px;
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
        box-shadow: 0 0 5px rgba(0,0,0,0.1);
        transition: background-color 0.2s ease;
    " onmouseover="this.style.backgroundColor='#e0f0ff'" onmouseout="this.style.backgroundColor='#ffffffcc'">
        ← Back to Homepage
    </a>
</div>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Huninn&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Zen+Old+Mincho&display=swap" rel="stylesheet">

<div class="center-container">
    <div class="login-card">
        <h2>User Registration</h2>
        <form id="signupForm">
            <div class="mb-3">
                <label class="form-label">Full name</label>
                <input id="fullname" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <input id="email" type="email" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Phone number</label>
                <input id="phone" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Address</label>
                <input id="address" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Username</label>
                <input id="username" class="form-control" required />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <input id="password" type="password" class="form-control" required />
            </div>

            <button type="submit" class="btn btn-primary w-100">Sign up</button>
        </form>

        <div id="message" class="alert mt-3" style="display: none;"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const apiBaseUrl = "@Model.ApiBaseUrl";
            const form = document.getElementById("signupForm");
            const msgBox = document.getElementById("message");

            form.addEventListener("submit", async function (e) {
                e.preventDefault();

                const data = {
                    username: document.getElementById("username").value,
                    password: document.getElementById("password").value,
                    fullname: document.getElementById("fullname").value,
                    email: document.getElementById("email").value,
                    phone: document.getElementById("phone").value,
                    address: document.getElementById("address").value
                };

                try {
                    // Step 1: Register
                    const regRes = await fetch(`${apiBaseUrl}/api/users`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data)
                    });

                    if (!regRes.ok) {
                        const errorText = await regRes.text();
                        throw new Error("Signup failed: " + errorText);
                    }

                    // Step 2: Login immediately
                    const loginRes = await fetch(`${apiBaseUrl}/api/users/login`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            username: data.username,
                            password: data.password
                        })
                    });

                    if (!loginRes.ok) {
                        const loginErr = await loginRes.text();
                        throw new Error("Login failed after signup: " + loginErr);
                    }

                    const loginJson = await loginRes.json();
                    const tokens = loginJson.data;

                    sessionStorage.setItem("jwt", tokens.accessToken);
                    sessionStorage.setItem("refreshToken", tokens.refreshToken);

                    msgBox.textContent = "✅ Registered and logged in successfully.";
                    msgBox.className = "alert alert-success";
                    msgBox.style.display = "block";

                    setTimeout(() => window.location.href = "/Main", 1000);
                } catch (err) {
                    msgBox.textContent = "❌ " + err.message;
                    msgBox.className = "alert alert-danger";
                    msgBox.style.display = "block";
                }
            });
        });
    </script>
}
